# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test-build:
    runs-on: ubuntu-latest

    env:
      # ✅ Cambia a "false" cuando alinees zod/openai en package.json
      USE_LEGACY_PEER_DEPS: "true"
      NODE_ENV: development
      # Opcional: más memoria por si tu build es pesado
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      # 1) Checkout (historial completo para Sentry)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Setup Node + cache npm
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      # 3) Hygiene npm (desactiva auditorías/funding y setea legacy-peer-deps si aplica)
      - name: NPM config (CI)
        run: |
          npm config set audit false
          npm config set fund false
          if [ "${USE_LEGACY_PEER_DEPS}" = "true" ]; then
            npm config set legacy-peer-deps true
          fi

      # 4) Instalar dependencias (ci -> install si no hay lockfile)
      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci"
            # Con legacy-peer-deps activo arriba si USE_LEGACY...=true
            npm ci --no-audit --no-fund || (echo "npm ci failed, retrying once…" && npm ci --no-audit --no-fund)
          else
            echo "No lockfile, using npm install"
            if [ "${USE_LEGACY_PEER_DEPS}" = "true" ]; then
              npm install --no-audit --no-fund --legacy-peer-deps
            else
              npm install --no-audit --no-fund
            fi
          fi

      # 5) Generar Prisma Client (si existe schema)
      - name: Generate Prisma
        run: |
          if [ -f prisma/schema.prisma ] || [ -f ./schema.prisma ]; then
            npx prisma generate
          else
            echo "No Prisma schema found, skipping generate"
          fi

      # 6) Lint (si existe script)
      - name: Lint
        run: |
          npm run lint --if-present

      # 7) Test
      - name: Test
        env:
          NODE_ENV: test
          JWT_SECRET: testsecret
          JWT_ISSUER: myapi
          JWT_AUDIENCE: myapi-clients
        run: |
          npm test --if-present -- --runInBand

      # 8) Build
      - name: Build
        run: |
          npm run build --if-present

      # 9) Sentry release (solo main y si hay token)
      - name: Sentry release
        if: github.ref == 'refs/heads/main' && env.SENTRY_AUTH_TOKEN != ''
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
